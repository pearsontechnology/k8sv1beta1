# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1CephFSVolumeSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Monitors=None, Path=None, User=None, SecretFile=None, SecretRef=None, ReadOnly=None):
        """
        V1CephFSVolumeSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Monitors': 'list[str]',
            'Path': 'str',
            'User': 'str',
            'SecretFile': 'str',
            'SecretRef': 'V1LocalObjectReference',
            'ReadOnly': 'bool'
        }

        self.attribute_map = {
            'Monitors': 'monitors',
            'Path': 'path',
            'User': 'user',
            'SecretFile': 'secretFile',
            'SecretRef': 'secretRef',
            'ReadOnly': 'readOnly'
        }

        self._Monitors = Monitors
        self._Path = Path
        self._User = User
        self._SecretFile = SecretFile
        self._SecretRef = SecretRef
        self._ReadOnly = ReadOnly

    @property
    def Monitors(self):
        """
        Gets the Monitors of this V1CephFSVolumeSource.
        Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :return: The Monitors of this V1CephFSVolumeSource.
        :rtype: list[str]
        """
        return self._Monitors

    @Monitors.setter
    def Monitors(self, Monitors):
        """
        Sets the Monitors of this V1CephFSVolumeSource.
        Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :param Monitors: The Monitors of this V1CephFSVolumeSource.
        :type: list[str]
        """

        self._Monitors = Monitors

    @property
    def Path(self):
        """
        Gets the Path of this V1CephFSVolumeSource.
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /

        :return: The Path of this V1CephFSVolumeSource.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        """
        Sets the Path of this V1CephFSVolumeSource.
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /

        :param Path: The Path of this V1CephFSVolumeSource.
        :type: str
        """

        self._Path = Path

    @property
    def User(self):
        """
        Gets the User of this V1CephFSVolumeSource.
        Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :return: The User of this V1CephFSVolumeSource.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        """
        Sets the User of this V1CephFSVolumeSource.
        Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :param User: The User of this V1CephFSVolumeSource.
        :type: str
        """

        self._User = User

    @property
    def SecretFile(self):
        """
        Gets the SecretFile of this V1CephFSVolumeSource.
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :return: The SecretFile of this V1CephFSVolumeSource.
        :rtype: str
        """
        return self._SecretFile

    @SecretFile.setter
    def SecretFile(self, SecretFile):
        """
        Sets the SecretFile of this V1CephFSVolumeSource.
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :param SecretFile: The SecretFile of this V1CephFSVolumeSource.
        :type: str
        """

        self._SecretFile = SecretFile

    @property
    def SecretRef(self):
        """
        Gets the SecretRef of this V1CephFSVolumeSource.
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :return: The SecretRef of this V1CephFSVolumeSource.
        :rtype: V1LocalObjectReference
        """
        return self._SecretRef

    @SecretRef.setter
    def SecretRef(self, SecretRef):
        """
        Sets the SecretRef of this V1CephFSVolumeSource.
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :param SecretRef: The SecretRef of this V1CephFSVolumeSource.
        :type: V1LocalObjectReference
        """

        self._SecretRef = SecretRef

    @property
    def ReadOnly(self):
        """
        Gets the ReadOnly of this V1CephFSVolumeSource.
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :return: The ReadOnly of this V1CephFSVolumeSource.
        :rtype: bool
        """
        return self._ReadOnly

    @ReadOnly.setter
    def ReadOnly(self, ReadOnly):
        """
        Sets the ReadOnly of this V1CephFSVolumeSource.
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it

        :param ReadOnly: The ReadOnly of this V1CephFSVolumeSource.
        :type: bool
        """

        self._ReadOnly = ReadOnly

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
