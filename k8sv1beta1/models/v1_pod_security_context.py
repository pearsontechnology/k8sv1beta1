# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1PodSecurityContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, seLinuxOptions=None, runAsUser=None, runAsNonRoot=None, supplementalGroups=None, fsGroup=None):
        """
        V1PodSecurityContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'seLinuxOptions': 'V1SELinuxOptions',
            'runAsUser': 'int',
            'runAsNonRoot': 'bool',
            'supplementalGroups': 'list[int]',
            'fsGroup': 'int'
        }

        self.attribute_map = {
            'seLinuxOptions': 'seLinuxOptions',
            'runAsUser': 'runAsUser',
            'runAsNonRoot': 'runAsNonRoot',
            'supplementalGroups': 'supplementalGroups',
            'fsGroup': 'fsGroup'
        }

        self._seLinuxOptions = seLinuxOptions
        self._runAsUser = runAsUser
        self._runAsNonRoot = runAsNonRoot
        self._supplementalGroups = supplementalGroups
        self._fsGroup = fsGroup

    @property
    def seLinuxOptions(self):
        """
        Gets the seLinuxOptions of this V1PodSecurityContext.
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.

        :return: The seLinuxOptions of this V1PodSecurityContext.
        :rtype: V1SELinuxOptions
        """
        return self._seLinuxOptions

    @seLinuxOptions.setter
    def seLinuxOptions(self, seLinuxOptions):
        """
        Sets the seLinuxOptions of this V1PodSecurityContext.
        The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.

        :param seLinuxOptions: The seLinuxOptions of this V1PodSecurityContext.
        :type: V1SELinuxOptions
        """

        self._seLinuxOptions = seLinuxOptions

    @property
    def runAsUser(self):
        """
        Gets the runAsUser of this V1PodSecurityContext.
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.

        :return: The runAsUser of this V1PodSecurityContext.
        :rtype: int
        """
        return self._runAsUser

    @runAsUser.setter
    def runAsUser(self, runAsUser):
        """
        Sets the runAsUser of this V1PodSecurityContext.
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.

        :param runAsUser: The runAsUser of this V1PodSecurityContext.
        :type: int
        """

        self._runAsUser = runAsUser

    @property
    def runAsNonRoot(self):
        """
        Gets the runAsNonRoot of this V1PodSecurityContext.
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

        :return: The runAsNonRoot of this V1PodSecurityContext.
        :rtype: bool
        """
        return self._runAsNonRoot

    @runAsNonRoot.setter
    def runAsNonRoot(self, runAsNonRoot):
        """
        Sets the runAsNonRoot of this V1PodSecurityContext.
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

        :param runAsNonRoot: The runAsNonRoot of this V1PodSecurityContext.
        :type: bool
        """

        self._runAsNonRoot = runAsNonRoot

    @property
    def supplementalGroups(self):
        """
        Gets the supplementalGroups of this V1PodSecurityContext.
        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.

        :return: The supplementalGroups of this V1PodSecurityContext.
        :rtype: list[int]
        """
        return self._supplementalGroups

    @supplementalGroups.setter
    def supplementalGroups(self, supplementalGroups):
        """
        Sets the supplementalGroups of this V1PodSecurityContext.
        A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.

        :param supplementalGroups: The supplementalGroups of this V1PodSecurityContext.
        :type: list[int]
        """

        self._supplementalGroups = supplementalGroups

    @property
    def fsGroup(self):
        """
        Gets the fsGroup of this V1PodSecurityContext.
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 

        :return: The fsGroup of this V1PodSecurityContext.
        :rtype: int
        """
        return self._fsGroup

    @fsGroup.setter
    def fsGroup(self, fsGroup):
        """
        Sets the fsGroup of this V1PodSecurityContext.
        A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw 

        :param fsGroup: The fsGroup of this V1PodSecurityContext.
        :type: int
        """

        self._fsGroup = fsGroup

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
