# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1Probe(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Exec=None, HttpGet=None, TcpSocket=None, InitialDelaySeconds=None, TimeoutSeconds=None, PeriodSeconds=None, SuccessThreshold=None, FailureThreshold=None):
        """
        V1Probe - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Exec': 'V1ExecAction',
            'HttpGet': 'V1HTTPGetAction',
            'TcpSocket': 'V1TCPSocketAction',
            'InitialDelaySeconds': 'int',
            'TimeoutSeconds': 'int',
            'PeriodSeconds': 'int',
            'SuccessThreshold': 'int',
            'FailureThreshold': 'int'
        }

        self.attribute_map = {
            'Exec': 'exec',
            'HttpGet': 'httpGet',
            'TcpSocket': 'tcpSocket',
            'InitialDelaySeconds': 'initialDelaySeconds',
            'TimeoutSeconds': 'timeoutSeconds',
            'PeriodSeconds': 'periodSeconds',
            'SuccessThreshold': 'successThreshold',
            'FailureThreshold': 'failureThreshold'
        }

        self._Exec = Exec
        self._HttpGet = HttpGet
        self._TcpSocket = TcpSocket
        self._InitialDelaySeconds = InitialDelaySeconds
        self._TimeoutSeconds = TimeoutSeconds
        self._PeriodSeconds = PeriodSeconds
        self._SuccessThreshold = SuccessThreshold
        self._FailureThreshold = FailureThreshold

    @property
    def Exec(self):
        """
        Gets the Exec of this V1Probe.
        One and only one of the following should be specified. Exec specifies the action to take.

        :return: The Exec of this V1Probe.
        :rtype: V1ExecAction
        """
        return self._Exec

    @Exec.setter
    def Exec(self, Exec):
        """
        Sets the Exec of this V1Probe.
        One and only one of the following should be specified. Exec specifies the action to take.

        :param Exec: The Exec of this V1Probe.
        :type: V1ExecAction
        """

        self._Exec = Exec

    @property
    def HttpGet(self):
        """
        Gets the HttpGet of this V1Probe.
        HTTPGet specifies the http request to perform.

        :return: The HttpGet of this V1Probe.
        :rtype: V1HTTPGetAction
        """
        return self._HttpGet

    @HttpGet.setter
    def HttpGet(self, HttpGet):
        """
        Sets the HttpGet of this V1Probe.
        HTTPGet specifies the http request to perform.

        :param HttpGet: The HttpGet of this V1Probe.
        :type: V1HTTPGetAction
        """

        self._HttpGet = HttpGet

    @property
    def TcpSocket(self):
        """
        Gets the TcpSocket of this V1Probe.
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported

        :return: The TcpSocket of this V1Probe.
        :rtype: V1TCPSocketAction
        """
        return self._TcpSocket

    @TcpSocket.setter
    def TcpSocket(self, TcpSocket):
        """
        Sets the TcpSocket of this V1Probe.
        TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported

        :param TcpSocket: The TcpSocket of this V1Probe.
        :type: V1TCPSocketAction
        """

        self._TcpSocket = TcpSocket

    @property
    def InitialDelaySeconds(self):
        """
        Gets the InitialDelaySeconds of this V1Probe.
        Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes

        :return: The InitialDelaySeconds of this V1Probe.
        :rtype: int
        """
        return self._InitialDelaySeconds

    @InitialDelaySeconds.setter
    def InitialDelaySeconds(self, InitialDelaySeconds):
        """
        Sets the InitialDelaySeconds of this V1Probe.
        Number of seconds after the container has started before liveness probes are initiated. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes

        :param InitialDelaySeconds: The InitialDelaySeconds of this V1Probe.
        :type: int
        """

        self._InitialDelaySeconds = InitialDelaySeconds

    @property
    def TimeoutSeconds(self):
        """
        Gets the TimeoutSeconds of this V1Probe.
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes

        :return: The TimeoutSeconds of this V1Probe.
        :rtype: int
        """
        return self._TimeoutSeconds

    @TimeoutSeconds.setter
    def TimeoutSeconds(self, TimeoutSeconds):
        """
        Sets the TimeoutSeconds of this V1Probe.
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://releases.k8s.io/HEAD/docs/user-guide/pod-states.md#container-probes

        :param TimeoutSeconds: The TimeoutSeconds of this V1Probe.
        :type: int
        """

        self._TimeoutSeconds = TimeoutSeconds

    @property
    def PeriodSeconds(self):
        """
        Gets the PeriodSeconds of this V1Probe.
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.

        :return: The PeriodSeconds of this V1Probe.
        :rtype: int
        """
        return self._PeriodSeconds

    @PeriodSeconds.setter
    def PeriodSeconds(self, PeriodSeconds):
        """
        Sets the PeriodSeconds of this V1Probe.
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.

        :param PeriodSeconds: The PeriodSeconds of this V1Probe.
        :type: int
        """

        self._PeriodSeconds = PeriodSeconds

    @property
    def SuccessThreshold(self):
        """
        Gets the SuccessThreshold of this V1Probe.
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.

        :return: The SuccessThreshold of this V1Probe.
        :rtype: int
        """
        return self._SuccessThreshold

    @SuccessThreshold.setter
    def SuccessThreshold(self, SuccessThreshold):
        """
        Sets the SuccessThreshold of this V1Probe.
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.

        :param SuccessThreshold: The SuccessThreshold of this V1Probe.
        :type: int
        """

        self._SuccessThreshold = SuccessThreshold

    @property
    def FailureThreshold(self):
        """
        Gets the FailureThreshold of this V1Probe.
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :return: The FailureThreshold of this V1Probe.
        :rtype: int
        """
        return self._FailureThreshold

    @FailureThreshold.setter
    def FailureThreshold(self, FailureThreshold):
        """
        Sets the FailureThreshold of this V1Probe.
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.

        :param FailureThreshold: The FailureThreshold of this V1Probe.
        :type: int
        """

        self._FailureThreshold = FailureThreshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
