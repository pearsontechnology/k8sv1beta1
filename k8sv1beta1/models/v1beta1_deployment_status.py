# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1beta1DeploymentStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ObservedGeneration=None, Replicas=None, UpdatedReplicas=None, AvailableReplicas=None, UnavailableReplicas=None):
        """
        V1beta1DeploymentStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ObservedGeneration': 'int',
            'Replicas': 'int',
            'UpdatedReplicas': 'int',
            'AvailableReplicas': 'int',
            'UnavailableReplicas': 'int'
        }

        self.attribute_map = {
            'ObservedGeneration': 'observedGeneration',
            'Replicas': 'replicas',
            'UpdatedReplicas': 'updatedReplicas',
            'AvailableReplicas': 'availableReplicas',
            'UnavailableReplicas': 'unavailableReplicas'
        }

        self._ObservedGeneration = ObservedGeneration
        self._Replicas = Replicas
        self._UpdatedReplicas = UpdatedReplicas
        self._AvailableReplicas = AvailableReplicas
        self._UnavailableReplicas = UnavailableReplicas

    @property
    def ObservedGeneration(self):
        """
        Gets the ObservedGeneration of this V1beta1DeploymentStatus.
        The generation observed by the deployment controller.

        :return: The ObservedGeneration of this V1beta1DeploymentStatus.
        :rtype: int
        """
        return self._ObservedGeneration

    @ObservedGeneration.setter
    def ObservedGeneration(self, ObservedGeneration):
        """
        Sets the ObservedGeneration of this V1beta1DeploymentStatus.
        The generation observed by the deployment controller.

        :param ObservedGeneration: The ObservedGeneration of this V1beta1DeploymentStatus.
        :type: int
        """

        self._ObservedGeneration = ObservedGeneration

    @property
    def Replicas(self):
        """
        Gets the Replicas of this V1beta1DeploymentStatus.
        Total number of non-terminated pods targeted by this deployment (their labels match the selector).

        :return: The Replicas of this V1beta1DeploymentStatus.
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        """
        Sets the Replicas of this V1beta1DeploymentStatus.
        Total number of non-terminated pods targeted by this deployment (their labels match the selector).

        :param Replicas: The Replicas of this V1beta1DeploymentStatus.
        :type: int
        """

        self._Replicas = Replicas

    @property
    def UpdatedReplicas(self):
        """
        Gets the UpdatedReplicas of this V1beta1DeploymentStatus.
        Total number of non-terminated pods targeted by this deployment that have the desired template spec.

        :return: The UpdatedReplicas of this V1beta1DeploymentStatus.
        :rtype: int
        """
        return self._UpdatedReplicas

    @UpdatedReplicas.setter
    def UpdatedReplicas(self, UpdatedReplicas):
        """
        Sets the UpdatedReplicas of this V1beta1DeploymentStatus.
        Total number of non-terminated pods targeted by this deployment that have the desired template spec.

        :param UpdatedReplicas: The UpdatedReplicas of this V1beta1DeploymentStatus.
        :type: int
        """

        self._UpdatedReplicas = UpdatedReplicas

    @property
    def AvailableReplicas(self):
        """
        Gets the AvailableReplicas of this V1beta1DeploymentStatus.
        Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.

        :return: The AvailableReplicas of this V1beta1DeploymentStatus.
        :rtype: int
        """
        return self._AvailableReplicas

    @AvailableReplicas.setter
    def AvailableReplicas(self, AvailableReplicas):
        """
        Sets the AvailableReplicas of this V1beta1DeploymentStatus.
        Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.

        :param AvailableReplicas: The AvailableReplicas of this V1beta1DeploymentStatus.
        :type: int
        """

        self._AvailableReplicas = AvailableReplicas

    @property
    def UnavailableReplicas(self):
        """
        Gets the UnavailableReplicas of this V1beta1DeploymentStatus.
        Total number of unavailable pods targeted by this deployment.

        :return: The UnavailableReplicas of this V1beta1DeploymentStatus.
        :rtype: int
        """
        return self._UnavailableReplicas

    @UnavailableReplicas.setter
    def UnavailableReplicas(self, UnavailableReplicas):
        """
        Sets the UnavailableReplicas of this V1beta1DeploymentStatus.
        Total number of unavailable pods targeted by this deployment.

        :param UnavailableReplicas: The UnavailableReplicas of this V1beta1DeploymentStatus.
        :type: int
        """

        self._UnavailableReplicas = UnavailableReplicas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
