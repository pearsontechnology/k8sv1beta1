# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1beta1JobSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Parallelism=None, Completions=None, ActiveDeadlineSeconds=None, Selector=None, AutoSelector=None, Template=None):
        """
        V1beta1JobSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Parallelism': 'int',
            'Completions': 'int',
            'ActiveDeadlineSeconds': 'int',
            'Selector': 'V1beta1LabelSelector',
            'AutoSelector': 'bool',
            'Template': 'V1PodTemplateSpec'
        }

        self.attribute_map = {
            'Parallelism': 'parallelism',
            'Completions': 'completions',
            'ActiveDeadlineSeconds': 'activeDeadlineSeconds',
            'Selector': 'selector',
            'AutoSelector': 'autoSelector',
            'Template': 'template'
        }

        self._Parallelism = Parallelism
        self._Completions = Completions
        self._ActiveDeadlineSeconds = ActiveDeadlineSeconds
        self._Selector = Selector
        self._AutoSelector = AutoSelector
        self._Template = Template

    @property
    def Parallelism(self):
        """
        Gets the Parallelism of this V1beta1JobSpec.
        Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :return: The Parallelism of this V1beta1JobSpec.
        :rtype: int
        """
        return self._Parallelism

    @Parallelism.setter
    def Parallelism(self, Parallelism):
        """
        Sets the Parallelism of this V1beta1JobSpec.
        Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :param Parallelism: The Parallelism of this V1beta1JobSpec.
        :type: int
        """

        self._Parallelism = Parallelism

    @property
    def Completions(self):
        """
        Gets the Completions of this V1beta1JobSpec.
        Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :return: The Completions of this V1beta1JobSpec.
        :rtype: int
        """
        return self._Completions

    @Completions.setter
    def Completions(self, Completions):
        """
        Sets the Completions of this V1beta1JobSpec.
        Completions specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :param Completions: The Completions of this V1beta1JobSpec.
        :type: int
        """

        self._Completions = Completions

    @property
    def ActiveDeadlineSeconds(self):
        """
        Gets the ActiveDeadlineSeconds of this V1beta1JobSpec.
        Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer

        :return: The ActiveDeadlineSeconds of this V1beta1JobSpec.
        :rtype: int
        """
        return self._ActiveDeadlineSeconds

    @ActiveDeadlineSeconds.setter
    def ActiveDeadlineSeconds(self, ActiveDeadlineSeconds):
        """
        Sets the ActiveDeadlineSeconds of this V1beta1JobSpec.
        Optional duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer

        :param ActiveDeadlineSeconds: The ActiveDeadlineSeconds of this V1beta1JobSpec.
        :type: int
        """

        self._ActiveDeadlineSeconds = ActiveDeadlineSeconds

    @property
    def Selector(self):
        """
        Gets the Selector of this V1beta1JobSpec.
        Selector is a label query over pods that should match the pod count. Normally, the system sets this field for you. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors

        :return: The Selector of this V1beta1JobSpec.
        :rtype: V1beta1LabelSelector
        """
        return self._Selector

    @Selector.setter
    def Selector(self, Selector):
        """
        Sets the Selector of this V1beta1JobSpec.
        Selector is a label query over pods that should match the pod count. Normally, the system sets this field for you. More info: http://releases.k8s.io/HEAD/docs/user-guide/labels.md#label-selectors

        :param Selector: The Selector of this V1beta1JobSpec.
        :type: V1beta1LabelSelector
        """

        self._Selector = Selector

    @property
    def AutoSelector(self):
        """
        Gets the AutoSelector of this V1beta1JobSpec.
        AutoSelector controls generation of pod labels and pod selectors. It was not present in the original extensions/v1beta1 Job definition, but exists to allow conversion from batch/v1 Jobs, where it corresponds to, but has the opposite meaning as, ManualSelector. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md

        :return: The AutoSelector of this V1beta1JobSpec.
        :rtype: bool
        """
        return self._AutoSelector

    @AutoSelector.setter
    def AutoSelector(self, AutoSelector):
        """
        Sets the AutoSelector of this V1beta1JobSpec.
        AutoSelector controls generation of pod labels and pod selectors. It was not present in the original extensions/v1beta1 Job definition, but exists to allow conversion from batch/v1 Jobs, where it corresponds to, but has the opposite meaning as, ManualSelector. More info: http://releases.k8s.io/HEAD/docs/design/selector-generation.md

        :param AutoSelector: The AutoSelector of this V1beta1JobSpec.
        :type: bool
        """

        self._AutoSelector = AutoSelector

    @property
    def Template(self):
        """
        Gets the Template of this V1beta1JobSpec.
        Template is the object that describes the pod that will be created when executing a job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :return: The Template of this V1beta1JobSpec.
        :rtype: V1PodTemplateSpec
        """
        return self._Template

    @Template.setter
    def Template(self, Template):
        """
        Sets the Template of this V1beta1JobSpec.
        Template is the object that describes the pod that will be created when executing a job. More info: http://releases.k8s.io/HEAD/docs/user-guide/jobs.md

        :param Template: The Template of this V1beta1JobSpec.
        :type: V1PodTemplateSpec
        """

        self._Template = Template

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
