# coding: utf-8

"""
    

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ContainerPort(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, hostPort=None, containerPort=None, protocol=None, hostIP=None):
        """
        V1ContainerPort - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'hostPort': 'int',
            'containerPort': 'int',
            'protocol': 'str',
            'hostIP': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'hostPort': 'hostPort',
            'containerPort': 'containerPort',
            'protocol': 'protocol',
            'hostIP': 'hostIP'
        }

        self._name = name
        self._hostPort = hostPort
        self._containerPort = containerPort
        self._protocol = protocol
        self._hostIP = hostIP

    @property
    def name(self):
        """
        Gets the name of this V1ContainerPort.
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.

        :return: The name of this V1ContainerPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this V1ContainerPort.
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.

        :param name: The name of this V1ContainerPort.
        :type: str
        """

        self._name = name

    @property
    def hostPort(self):
        """
        Gets the hostPort of this V1ContainerPort.
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.

        :return: The hostPort of this V1ContainerPort.
        :rtype: int
        """
        return self._hostPort

    @hostPort.setter
    def hostPort(self, hostPort):
        """
        Sets the hostPort of this V1ContainerPort.
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.

        :param hostPort: The hostPort of this V1ContainerPort.
        :type: int
        """

        self._hostPort = hostPort

    @property
    def containerPort(self):
        """
        Gets the containerPort of this V1ContainerPort.
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.

        :return: The containerPort of this V1ContainerPort.
        :rtype: int
        """
        return self._containerPort

    @containerPort.setter
    def containerPort(self, containerPort):
        """
        Sets the containerPort of this V1ContainerPort.
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.

        :param containerPort: The containerPort of this V1ContainerPort.
        :type: int
        """

        self._containerPort = containerPort

    @property
    def protocol(self):
        """
        Gets the protocol of this V1ContainerPort.
        Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".

        :return: The protocol of this V1ContainerPort.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this V1ContainerPort.
        Protocol for port. Must be UDP or TCP. Defaults to \"TCP\".

        :param protocol: The protocol of this V1ContainerPort.
        :type: str
        """

        self._protocol = protocol

    @property
    def hostIP(self):
        """
        Gets the hostIP of this V1ContainerPort.
        What host IP to bind the external port to.

        :return: The hostIP of this V1ContainerPort.
        :rtype: str
        """
        return self._hostIP

    @hostIP.setter
    def hostIP(self, hostIP):
        """
        Sets the hostIP of this V1ContainerPort.
        What host IP to bind the external port to.

        :param hostIP: The hostIP of this V1ContainerPort.
        :type: str
        """

        self._hostIP = hostIP

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
