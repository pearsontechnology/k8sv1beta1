# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1beta1HTTPIngressPath(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Path=None, Backend=None):
        """
        V1beta1HTTPIngressPath - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Path': 'str',
            'Backend': 'V1beta1IngressBackend'
        }

        self.attribute_map = {
            'Path': 'path',
            'Backend': 'backend'
        }

        self._Path = Path
        self._Backend = Backend

    @property
    def Path(self):
        """
        Gets the Path of this V1beta1HTTPIngressPath.
        Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.

        :return: The Path of this V1beta1HTTPIngressPath.
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        """
        Sets the Path of this V1beta1HTTPIngressPath.
        Path is a extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.

        :param Path: The Path of this V1beta1HTTPIngressPath.
        :type: str
        """

        self._Path = Path

    @property
    def Backend(self):
        """
        Gets the Backend of this V1beta1HTTPIngressPath.
        Backend defines the referenced service endpoint to which the traffic will be forwarded to.

        :return: The Backend of this V1beta1HTTPIngressPath.
        :rtype: V1beta1IngressBackend
        """
        return self._Backend

    @Backend.setter
    def Backend(self, Backend):
        """
        Sets the Backend of this V1beta1HTTPIngressPath.
        Backend defines the referenced service endpoint to which the traffic will be forwarded to.

        :param Backend: The Backend of this V1beta1HTTPIngressPath.
        :type: V1beta1IngressBackend
        """

        self._Backend = Backend

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
