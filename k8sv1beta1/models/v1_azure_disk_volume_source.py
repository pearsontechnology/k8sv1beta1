# coding: utf-8

"""
    

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1AzureDiskVolumeSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, diskName=None, diskURI=None, cachingMode=None, fsType=None, readOnly=None):
        """
        V1AzureDiskVolumeSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'diskName': 'str',
            'diskURI': 'str',
            'cachingMode': 'V1AzureDataDiskCachingMode',
            'fsType': 'str',
            'readOnly': 'bool'
        }

        self.attribute_map = {
            'diskName': 'diskName',
            'diskURI': 'diskURI',
            'cachingMode': 'cachingMode',
            'fsType': 'fsType',
            'readOnly': 'readOnly'
        }

        self._diskName = diskName
        self._diskURI = diskURI
        self._cachingMode = cachingMode
        self._fsType = fsType
        self._readOnly = readOnly

    @property
    def diskName(self):
        """
        Gets the diskName of this V1AzureDiskVolumeSource.
        The Name of the data disk in the blob storage

        :return: The diskName of this V1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._diskName

    @diskName.setter
    def diskName(self, diskName):
        """
        Sets the diskName of this V1AzureDiskVolumeSource.
        The Name of the data disk in the blob storage

        :param diskName: The diskName of this V1AzureDiskVolumeSource.
        :type: str
        """

        self._diskName = diskName

    @property
    def diskURI(self):
        """
        Gets the diskURI of this V1AzureDiskVolumeSource.
        The URI the data disk in the blob storage

        :return: The diskURI of this V1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._diskURI

    @diskURI.setter
    def diskURI(self, diskURI):
        """
        Sets the diskURI of this V1AzureDiskVolumeSource.
        The URI the data disk in the blob storage

        :param diskURI: The diskURI of this V1AzureDiskVolumeSource.
        :type: str
        """

        self._diskURI = diskURI

    @property
    def cachingMode(self):
        """
        Gets the cachingMode of this V1AzureDiskVolumeSource.
        Host Caching mode: None, Read Only, Read Write.

        :return: The cachingMode of this V1AzureDiskVolumeSource.
        :rtype: V1AzureDataDiskCachingMode
        """
        return self._cachingMode

    @cachingMode.setter
    def cachingMode(self, cachingMode):
        """
        Sets the cachingMode of this V1AzureDiskVolumeSource.
        Host Caching mode: None, Read Only, Read Write.

        :param cachingMode: The cachingMode of this V1AzureDiskVolumeSource.
        :type: V1AzureDataDiskCachingMode
        """

        self._cachingMode = cachingMode

    @property
    def fsType(self):
        """
        Gets the fsType of this V1AzureDiskVolumeSource.
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.

        :return: The fsType of this V1AzureDiskVolumeSource.
        :rtype: str
        """
        return self._fsType

    @fsType.setter
    def fsType(self, fsType):
        """
        Sets the fsType of this V1AzureDiskVolumeSource.
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.

        :param fsType: The fsType of this V1AzureDiskVolumeSource.
        :type: str
        """

        self._fsType = fsType

    @property
    def readOnly(self):
        """
        Gets the readOnly of this V1AzureDiskVolumeSource.
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

        :return: The readOnly of this V1AzureDiskVolumeSource.
        :rtype: bool
        """
        return self._readOnly

    @readOnly.setter
    def readOnly(self, readOnly):
        """
        Sets the readOnly of this V1AzureDiskVolumeSource.
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.

        :param readOnly: The readOnly of this V1AzureDiskVolumeSource.
        :type: bool
        """

        self._readOnly = readOnly

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
