# coding: utf-8

"""
    

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1EnvVarSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fieldRef=None, resourceFieldRef=None, configMapKeyRef=None, secretKeyRef=None):
        """
        V1EnvVarSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fieldRef': 'V1ObjectFieldSelector',
            'resourceFieldRef': 'V1ResourceFieldSelector',
            'configMapKeyRef': 'V1ConfigMapKeySelector',
            'secretKeyRef': 'V1SecretKeySelector'
        }

        self.attribute_map = {
            'fieldRef': 'fieldRef',
            'resourceFieldRef': 'resourceFieldRef',
            'configMapKeyRef': 'configMapKeyRef',
            'secretKeyRef': 'secretKeyRef'
        }

        self._fieldRef = fieldRef
        self._resourceFieldRef = resourceFieldRef
        self._configMapKeyRef = configMapKeyRef
        self._secretKeyRef = secretKeyRef

    @property
    def fieldRef(self):
        """
        Gets the fieldRef of this V1EnvVarSource.
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.

        :return: The fieldRef of this V1EnvVarSource.
        :rtype: V1ObjectFieldSelector
        """
        return self._fieldRef

    @fieldRef.setter
    def fieldRef(self, fieldRef):
        """
        Sets the fieldRef of this V1EnvVarSource.
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.

        :param fieldRef: The fieldRef of this V1EnvVarSource.
        :type: V1ObjectFieldSelector
        """

        self._fieldRef = fieldRef

    @property
    def resourceFieldRef(self):
        """
        Gets the resourceFieldRef of this V1EnvVarSource.
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

        :return: The resourceFieldRef of this V1EnvVarSource.
        :rtype: V1ResourceFieldSelector
        """
        return self._resourceFieldRef

    @resourceFieldRef.setter
    def resourceFieldRef(self, resourceFieldRef):
        """
        Sets the resourceFieldRef of this V1EnvVarSource.
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

        :param resourceFieldRef: The resourceFieldRef of this V1EnvVarSource.
        :type: V1ResourceFieldSelector
        """

        self._resourceFieldRef = resourceFieldRef

    @property
    def configMapKeyRef(self):
        """
        Gets the configMapKeyRef of this V1EnvVarSource.
        Selects a key of a ConfigMap.

        :return: The configMapKeyRef of this V1EnvVarSource.
        :rtype: V1ConfigMapKeySelector
        """
        return self._configMapKeyRef

    @configMapKeyRef.setter
    def configMapKeyRef(self, configMapKeyRef):
        """
        Sets the configMapKeyRef of this V1EnvVarSource.
        Selects a key of a ConfigMap.

        :param configMapKeyRef: The configMapKeyRef of this V1EnvVarSource.
        :type: V1ConfigMapKeySelector
        """

        self._configMapKeyRef = configMapKeyRef

    @property
    def secretKeyRef(self):
        """
        Gets the secretKeyRef of this V1EnvVarSource.
        Selects a key of a secret in the pod's namespace

        :return: The secretKeyRef of this V1EnvVarSource.
        :rtype: V1SecretKeySelector
        """
        return self._secretKeyRef

    @secretKeyRef.setter
    def secretKeyRef(self, secretKeyRef):
        """
        Sets the secretKeyRef of this V1EnvVarSource.
        Selects a key of a secret in the pod's namespace

        :param secretKeyRef: The secretKeyRef of this V1EnvVarSource.
        :type: V1SecretKeySelector
        """

        self._secretKeyRef = secretKeyRef

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
