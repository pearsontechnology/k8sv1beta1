# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1VolumeMount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Name=None, ReadOnly=None, MountPath=None, SubPath=None):
        """
        V1VolumeMount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Name': 'str',
            'ReadOnly': 'bool',
            'MountPath': 'str',
            'SubPath': 'str'
        }

        self.attribute_map = {
            'Name': 'name',
            'ReadOnly': 'readOnly',
            'MountPath': 'mountPath',
            'SubPath': 'subPath'
        }

        self._Name = Name
        self._ReadOnly = ReadOnly
        self._MountPath = MountPath
        self._SubPath = SubPath

    @property
    def Name(self):
        """
        Gets the Name of this V1VolumeMount.
        This must match the Name of a Volume.

        :return: The Name of this V1VolumeMount.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """
        Sets the Name of this V1VolumeMount.
        This must match the Name of a Volume.

        :param Name: The Name of this V1VolumeMount.
        :type: str
        """

        self._Name = Name

    @property
    def ReadOnly(self):
        """
        Gets the ReadOnly of this V1VolumeMount.
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.

        :return: The ReadOnly of this V1VolumeMount.
        :rtype: bool
        """
        return self._ReadOnly

    @ReadOnly.setter
    def ReadOnly(self, ReadOnly):
        """
        Sets the ReadOnly of this V1VolumeMount.
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.

        :param ReadOnly: The ReadOnly of this V1VolumeMount.
        :type: bool
        """

        self._ReadOnly = ReadOnly

    @property
    def MountPath(self):
        """
        Gets the MountPath of this V1VolumeMount.
        Path within the container at which the volume should be mounted.  Must not contain ':'.

        :return: The MountPath of this V1VolumeMount.
        :rtype: str
        """
        return self._MountPath

    @MountPath.setter
    def MountPath(self, MountPath):
        """
        Sets the MountPath of this V1VolumeMount.
        Path within the container at which the volume should be mounted.  Must not contain ':'.

        :param MountPath: The MountPath of this V1VolumeMount.
        :type: str
        """

        self._MountPath = MountPath

    @property
    def SubPath(self):
        """
        Gets the SubPath of this V1VolumeMount.
        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).

        :return: The SubPath of this V1VolumeMount.
        :rtype: str
        """
        return self._SubPath

    @SubPath.setter
    def SubPath(self, SubPath):
        """
        Sets the SubPath of this V1VolumeMount.
        Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).

        :param SubPath: The SubPath of this V1VolumeMount.
        :type: str
        """

        self._SubPath = SubPath

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
