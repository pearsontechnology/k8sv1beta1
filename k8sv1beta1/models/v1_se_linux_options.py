# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1SELinuxOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, User=None, Role=None, Type=None, Level=None):
        """
        V1SELinuxOptions - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'User': 'str',
            'Role': 'str',
            'Type': 'str',
            'Level': 'str'
        }

        self.attribute_map = {
            'User': 'user',
            'Role': 'role',
            'Type': 'type',
            'Level': 'level'
        }

        self._User = User
        self._Role = Role
        self._Type = Type
        self._Level = Level

    @property
    def User(self):
        """
        Gets the User of this V1SELinuxOptions.
        User is a SELinux user label that applies to the container.

        :return: The User of this V1SELinuxOptions.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        """
        Sets the User of this V1SELinuxOptions.
        User is a SELinux user label that applies to the container.

        :param User: The User of this V1SELinuxOptions.
        :type: str
        """

        self._User = User

    @property
    def Role(self):
        """
        Gets the Role of this V1SELinuxOptions.
        Role is a SELinux role label that applies to the container.

        :return: The Role of this V1SELinuxOptions.
        :rtype: str
        """
        return self._Role

    @Role.setter
    def Role(self, Role):
        """
        Sets the Role of this V1SELinuxOptions.
        Role is a SELinux role label that applies to the container.

        :param Role: The Role of this V1SELinuxOptions.
        :type: str
        """

        self._Role = Role

    @property
    def Type(self):
        """
        Gets the Type of this V1SELinuxOptions.
        Type is a SELinux type label that applies to the container.

        :return: The Type of this V1SELinuxOptions.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """
        Sets the Type of this V1SELinuxOptions.
        Type is a SELinux type label that applies to the container.

        :param Type: The Type of this V1SELinuxOptions.
        :type: str
        """

        self._Type = Type

    @property
    def Level(self):
        """
        Gets the Level of this V1SELinuxOptions.
        Level is SELinux level label that applies to the container.

        :return: The Level of this V1SELinuxOptions.
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        """
        Sets the Level of this V1SELinuxOptions.
        Level is SELinux level label that applies to the container.

        :param Level: The Level of this V1SELinuxOptions.
        :type: str
        """

        self._Level = Level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
