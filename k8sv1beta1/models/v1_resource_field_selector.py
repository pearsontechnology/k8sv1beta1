# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ResourceFieldSelector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ContainerName=None, Resource=None, Divisor=None):
        """
        V1ResourceFieldSelector - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ContainerName': 'str',
            'Resource': 'str',
            'Divisor': 'str'
        }

        self.attribute_map = {
            'ContainerName': 'containerName',
            'Resource': 'resource',
            'Divisor': 'divisor'
        }

        self._ContainerName = ContainerName
        self._Resource = Resource
        self._Divisor = Divisor

    @property
    def ContainerName(self):
        """
        Gets the ContainerName of this V1ResourceFieldSelector.
        Container name: required for volumes, optional for env vars

        :return: The ContainerName of this V1ResourceFieldSelector.
        :rtype: str
        """
        return self._ContainerName

    @ContainerName.setter
    def ContainerName(self, ContainerName):
        """
        Sets the ContainerName of this V1ResourceFieldSelector.
        Container name: required for volumes, optional for env vars

        :param ContainerName: The ContainerName of this V1ResourceFieldSelector.
        :type: str
        """

        self._ContainerName = ContainerName

    @property
    def Resource(self):
        """
        Gets the Resource of this V1ResourceFieldSelector.
        Required: resource to select

        :return: The Resource of this V1ResourceFieldSelector.
        :rtype: str
        """
        return self._Resource

    @Resource.setter
    def Resource(self, Resource):
        """
        Sets the Resource of this V1ResourceFieldSelector.
        Required: resource to select

        :param Resource: The Resource of this V1ResourceFieldSelector.
        :type: str
        """

        self._Resource = Resource

    @property
    def Divisor(self):
        """
        Gets the Divisor of this V1ResourceFieldSelector.
        Specifies the output format of the exposed resources, defaults to \"1\"

        :return: The Divisor of this V1ResourceFieldSelector.
        :rtype: str
        """
        return self._Divisor

    @Divisor.setter
    def Divisor(self, Divisor):
        """
        Sets the Divisor of this V1ResourceFieldSelector.
        Specifies the output format of the exposed resources, defaults to \"1\"

        :param Divisor: The Divisor of this V1ResourceFieldSelector.
        :type: str
        """

        self._Divisor = Divisor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
