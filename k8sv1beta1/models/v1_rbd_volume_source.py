# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1RBDVolumeSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Monitors=None, Image=None, FsType=None, Pool=None, User=None, Keyring=None, SecretRef=None, ReadOnly=None):
        """
        V1RBDVolumeSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Monitors': 'list[str]',
            'Image': 'str',
            'FsType': 'str',
            'Pool': 'str',
            'User': 'str',
            'Keyring': 'str',
            'SecretRef': 'V1LocalObjectReference',
            'ReadOnly': 'bool'
        }

        self.attribute_map = {
            'Monitors': 'monitors',
            'Image': 'image',
            'FsType': 'fsType',
            'Pool': 'pool',
            'User': 'user',
            'Keyring': 'keyring',
            'SecretRef': 'secretRef',
            'ReadOnly': 'readOnly'
        }

        self._Monitors = Monitors
        self._Image = Image
        self._FsType = FsType
        self._Pool = Pool
        self._User = User
        self._Keyring = Keyring
        self._SecretRef = SecretRef
        self._ReadOnly = ReadOnly

    @property
    def Monitors(self):
        """
        Gets the Monitors of this V1RBDVolumeSource.
        A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The Monitors of this V1RBDVolumeSource.
        :rtype: list[str]
        """
        return self._Monitors

    @Monitors.setter
    def Monitors(self, Monitors):
        """
        Sets the Monitors of this V1RBDVolumeSource.
        A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param Monitors: The Monitors of this V1RBDVolumeSource.
        :type: list[str]
        """

        self._Monitors = Monitors

    @property
    def Image(self):
        """
        Gets the Image of this V1RBDVolumeSource.
        The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The Image of this V1RBDVolumeSource.
        :rtype: str
        """
        return self._Image

    @Image.setter
    def Image(self, Image):
        """
        Sets the Image of this V1RBDVolumeSource.
        The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param Image: The Image of this V1RBDVolumeSource.
        :type: str
        """

        self._Image = Image

    @property
    def FsType(self):
        """
        Gets the FsType of this V1RBDVolumeSource.
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#rbd

        :return: The FsType of this V1RBDVolumeSource.
        :rtype: str
        """
        return self._FsType

    @FsType.setter
    def FsType(self, FsType):
        """
        Sets the FsType of this V1RBDVolumeSource.
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/docs/user-guide/volumes.md#rbd

        :param FsType: The FsType of this V1RBDVolumeSource.
        :type: str
        """

        self._FsType = FsType

    @property
    def Pool(self):
        """
        Gets the Pool of this V1RBDVolumeSource.
        The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.

        :return: The Pool of this V1RBDVolumeSource.
        :rtype: str
        """
        return self._Pool

    @Pool.setter
    def Pool(self, Pool):
        """
        Sets the Pool of this V1RBDVolumeSource.
        The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.

        :param Pool: The Pool of this V1RBDVolumeSource.
        :type: str
        """

        self._Pool = Pool

    @property
    def User(self):
        """
        Gets the User of this V1RBDVolumeSource.
        The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The User of this V1RBDVolumeSource.
        :rtype: str
        """
        return self._User

    @User.setter
    def User(self, User):
        """
        Sets the User of this V1RBDVolumeSource.
        The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param User: The User of this V1RBDVolumeSource.
        :type: str
        """

        self._User = User

    @property
    def Keyring(self):
        """
        Gets the Keyring of this V1RBDVolumeSource.
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The Keyring of this V1RBDVolumeSource.
        :rtype: str
        """
        return self._Keyring

    @Keyring.setter
    def Keyring(self, Keyring):
        """
        Sets the Keyring of this V1RBDVolumeSource.
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param Keyring: The Keyring of this V1RBDVolumeSource.
        :type: str
        """

        self._Keyring = Keyring

    @property
    def SecretRef(self):
        """
        Gets the SecretRef of this V1RBDVolumeSource.
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The SecretRef of this V1RBDVolumeSource.
        :rtype: V1LocalObjectReference
        """
        return self._SecretRef

    @SecretRef.setter
    def SecretRef(self, SecretRef):
        """
        Sets the SecretRef of this V1RBDVolumeSource.
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param SecretRef: The SecretRef of this V1RBDVolumeSource.
        :type: V1LocalObjectReference
        """

        self._SecretRef = SecretRef

    @property
    def ReadOnly(self):
        """
        Gets the ReadOnly of this V1RBDVolumeSource.
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :return: The ReadOnly of this V1RBDVolumeSource.
        :rtype: bool
        """
        return self._ReadOnly

    @ReadOnly.setter
    def ReadOnly(self, ReadOnly):
        """
        Sets the ReadOnly of this V1RBDVolumeSource.
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it

        :param ReadOnly: The ReadOnly of this V1RBDVolumeSource.
        :type: bool
        """

        self._ReadOnly = ReadOnly

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
