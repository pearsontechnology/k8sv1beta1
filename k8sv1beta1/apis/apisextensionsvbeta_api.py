# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: extensions/v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApisextensionsvbetaApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_namespaced_daemon_set(self, Body, Namespace, **kwargs):
        """
        create a DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_daemon_set(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_daemon_set_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_daemon_set_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_daemon_set_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_daemon_set_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_daemon_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_deployment(self, Body, Namespace, **kwargs):
        """
        create a Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_deployment(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_deployment_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_deployment_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_deployment_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_deployment_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_deployment`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_deployment_rollback_rollback(self, Body, Namespace, Name, **kwargs):
        """
        create rollback of a DeploymentRollback
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_deployment_rollback_rollback(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DeploymentRollback Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DeploymentRollback (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DeploymentRollback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_deployment_rollback_rollback_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.create_namespaced_deployment_rollback_rollback_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def create_namespaced_deployment_rollback_rollback_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        create rollback of a DeploymentRollback
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_deployment_rollback_rollback_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DeploymentRollback Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DeploymentRollback (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DeploymentRollback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_deployment_rollback_rollback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_deployment_rollback_rollback`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_deployment_rollback_rollback`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `create_namespaced_deployment_rollback_rollback`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DeploymentRollback',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_horizontal_pod_autoscaler(self, Body, Namespace, **kwargs):
        """
        create a HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_horizontal_pod_autoscaler(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_horizontal_pod_autoscaler_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_ingress(self, Body, Namespace, **kwargs):
        """
        create a Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_ingress(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_ingress_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_ingress_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_ingress_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_ingress_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_ingress`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_job(self, Body, Namespace, **kwargs):
        """
        create a Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_job(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_job_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_job_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_job_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_job_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_job`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_network_policy(self, Body, Namespace, **kwargs):
        """
        create a NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_network_policy(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1NetworkPolicy Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_network_policy_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_network_policy_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_network_policy_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_network_policy_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1NetworkPolicy Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_network_policy`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_namespaced_replica_set(self, Body, Namespace, **kwargs):
        """
        create a ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_replica_set(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_namespaced_replica_set_with_http_info(Body, Namespace, **kwargs)
        else:
            (data) = self.create_namespaced_replica_set_with_http_info(Body, Namespace, **kwargs)
            return data

    def create_namespaced_replica_set_with_http_info(self, Body, Namespace, **kwargs):
        """
        create a ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_namespaced_replica_set_with_http_info(Body, Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_namespaced_replica_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `create_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_third_party_resource(self, Body, **kwargs):
        """
        create a ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_third_party_resource(Body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ThirdPartyResource Body:  (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_third_party_resource_with_http_info(Body, **kwargs)
        else:
            (data) = self.create_third_party_resource_with_http_info(Body, **kwargs)
            return data

    def create_third_party_resource_with_http_info(self, Body, **kwargs):
        """
        create a ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_third_party_resource_with_http_info(Body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ThirdPartyResource Body:  (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `create_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ThirdPartyResource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_daemon_set(self, Body, Namespace, Name, **kwargs):
        """
        delete a DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_daemon_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_daemon_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_daemon_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_daemon_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_daemon_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_deployment(self, Body, Namespace, Name, **kwargs):
        """
        delete a Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_deployment(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_deployment_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_deployment_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_deployment`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_deployment`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_horizontal_pod_autoscaler(self, Body, Namespace, Name, **kwargs):
        """
        delete a HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_horizontal_pod_autoscaler(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_horizontal_pod_autoscaler_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_ingress(self, Body, Namespace, Name, **kwargs):
        """
        delete a Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_ingress(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_ingress_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_ingress_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_ingress`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_ingress`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_job(self, Body, Namespace, Name, **kwargs):
        """
        delete a Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_job(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_job_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_job_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_job`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_job`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_network_policy(self, Body, Namespace, Name, **kwargs):
        """
        delete a NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_network_policy(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_network_policy_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_network_policy_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_network_policy`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_network_policy`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_namespaced_replica_set(self, Body, Namespace, Name, **kwargs):
        """
        delete a ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_replica_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.delete_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def delete_namespaced_replica_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        delete a ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_namespaced_replica_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_namespaced_replica_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `delete_namespaced_replica_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_third_party_resource(self, Body, Name, **kwargs):
        """
        delete a ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_third_party_resource(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_third_party_resource_with_http_info(Body, Name, **kwargs)
        else:
            (data) = self.delete_third_party_resource_with_http_info(Body, Name, **kwargs)
            return data

    def delete_third_party_resource_with_http_info(self, Body, Name, **kwargs):
        """
        delete a ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_third_party_resource_with_http_info(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1DeleteOptions Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `delete_third_party_resource`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `delete_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_daemon_set(self, Namespace, **kwargs):
        """
        delete collection of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_daemon_set(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_daemon_set_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_daemon_set_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_daemon_set_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_daemon_set_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_deployment(self, Namespace, **kwargs):
        """
        delete collection of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_deployment(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_deployment_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_deployment_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_deployment_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_deployment_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_horizontal_pod_autoscaler(self, Namespace, **kwargs):
        """
        delete collection of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_horizontal_pod_autoscaler(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_horizontal_pod_autoscaler_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_ingress(self, Namespace, **kwargs):
        """
        delete collection of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_ingress(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_ingress_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_ingress_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_ingress_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_ingress_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_job(self, Namespace, **kwargs):
        """
        delete collection of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_job(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_job_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_job_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_job_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_job_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_network_policy(self, Namespace, **kwargs):
        """
        delete collection of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_network_policy(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_network_policy_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_network_policy_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_network_policy_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_network_policy_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_namespaced_replica_set(self, Namespace, **kwargs):
        """
        delete collection of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_replica_set(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_namespaced_replica_set_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.deletecollection_namespaced_replica_set_with_http_info(Namespace, **kwargs)
            return data

    def deletecollection_namespaced_replica_set_with_http_info(self, Namespace, **kwargs):
        """
        delete collection of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_namespaced_replica_set_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `deletecollection_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def deletecollection_third_party_resource(self, **kwargs):
        """
        delete collection of ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_third_party_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deletecollection_third_party_resource_with_http_info(**kwargs)
        else:
            (data) = self.deletecollection_third_party_resource_with_http_info(**kwargs)
            return data

    def deletecollection_third_party_resource_with_http_info(self, **kwargs):
        """
        delete collection of ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deletecollection_third_party_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: UnversionedStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deletecollection_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedStatus',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_api_resources(self, **kwargs):
        """
        get available resources
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_resources(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnversionedAPIResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_resources_with_http_info(**kwargs)
        else:
            (data) = self.get_api_resources_with_http_info(**kwargs)
            return data

    def get_api_resources_with_http_info(self, **kwargs):
        """
        get available resources
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_resources_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UnversionedAPIResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_resources" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UnversionedAPIResourceList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_daemon_set(self, **kwargs):
        """
        list or watch objects of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_daemon_set(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DaemonSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_daemon_set_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_daemon_set_with_http_info(**kwargs)
            return data

    def list_namespaced_daemon_set_with_http_info(self, **kwargs):
        """
        list or watch objects of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_daemon_set_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DaemonSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/daemonsets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSetList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_daemon_set_0(self, Namespace, **kwargs):
        """
        list or watch objects of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_daemon_set_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DaemonSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_daemon_set_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_daemon_set_0_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_daemon_set_0_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_daemon_set_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DaemonSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_daemon_set_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_daemon_set_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSetList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_deployment(self, **kwargs):
        """
        list or watch objects of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_deployment(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DeploymentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_deployment_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_deployment_with_http_info(**kwargs)
            return data

    def list_namespaced_deployment_with_http_info(self, **kwargs):
        """
        list or watch objects of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_deployment_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DeploymentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/deployments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DeploymentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_deployment_0(self, Namespace, **kwargs):
        """
        list or watch objects of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_deployment_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DeploymentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_deployment_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_deployment_0_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_deployment_0_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_deployment_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1DeploymentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_deployment_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_deployment_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DeploymentList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_horizontal_pod_autoscaler(self, **kwargs):
        """
        list or watch objects of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_horizontal_pod_autoscaler(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1HorizontalPodAutoscalerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_horizontal_pod_autoscaler_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_horizontal_pod_autoscaler_with_http_info(**kwargs)
            return data

    def list_namespaced_horizontal_pod_autoscaler_with_http_info(self, **kwargs):
        """
        list or watch objects of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_horizontal_pod_autoscaler_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1HorizontalPodAutoscalerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscalerList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_horizontal_pod_autoscaler_0(self, Namespace, **kwargs):
        """
        list or watch objects of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_horizontal_pod_autoscaler_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1HorizontalPodAutoscalerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_horizontal_pod_autoscaler_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_horizontal_pod_autoscaler_0_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_horizontal_pod_autoscaler_0_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_horizontal_pod_autoscaler_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1HorizontalPodAutoscalerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_horizontal_pod_autoscaler_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_horizontal_pod_autoscaler_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscalerList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_ingress(self, **kwargs):
        """
        list or watch objects of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_ingress(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1IngressList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_ingress_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_ingress_with_http_info(**kwargs)
            return data

    def list_namespaced_ingress_with_http_info(self, **kwargs):
        """
        list or watch objects of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_ingress_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1IngressList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/ingresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1IngressList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_ingress_0(self, Namespace, **kwargs):
        """
        list or watch objects of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_ingress_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1IngressList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_ingress_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_ingress_0_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_ingress_0_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_ingress_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1IngressList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_ingress_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_ingress_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1IngressList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_job(self, **kwargs):
        """
        list or watch objects of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_job(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1JobList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_job_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_job_with_http_info(**kwargs)
            return data

    def list_namespaced_job_with_http_info(self, **kwargs):
        """
        list or watch objects of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_job_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1JobList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1JobList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_job_0(self, Namespace, **kwargs):
        """
        list or watch objects of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_job_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1JobList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_job_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_job_0_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_job_0_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_job_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1JobList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_job_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_job_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1JobList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_network_policy(self, Namespace, **kwargs):
        """
        list or watch objects of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_network_policy(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1NetworkPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_network_policy_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_network_policy_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_network_policy_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_network_policy_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1NetworkPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_network_policy_0(self, **kwargs):
        """
        list or watch objects of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_network_policy_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1NetworkPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_network_policy_0_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_network_policy_0_with_http_info(**kwargs)
            return data

    def list_namespaced_network_policy_0_with_http_info(self, **kwargs):
        """
        list or watch objects of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_network_policy_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1NetworkPolicyList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_network_policy_0" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/networkpolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicyList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_replica_set(self, Namespace, **kwargs):
        """
        list or watch objects of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_replica_set(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ReplicaSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_replica_set_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.list_namespaced_replica_set_with_http_info(Namespace, **kwargs)
            return data

    def list_namespaced_replica_set_with_http_info(self, Namespace, **kwargs):
        """
        list or watch objects of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_replica_set_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ReplicaSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `list_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSetList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_namespaced_replica_set_0(self, **kwargs):
        """
        list or watch objects of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_replica_set_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ReplicaSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_namespaced_replica_set_0_with_http_info(**kwargs)
        else:
            (data) = self.list_namespaced_replica_set_0_with_http_info(**kwargs)
            return data

    def list_namespaced_replica_set_0_with_http_info(self, **kwargs):
        """
        list or watch objects of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_namespaced_replica_set_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ReplicaSetList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_namespaced_replica_set_0" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/replicasets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSetList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_third_party_resource(self, **kwargs):
        """
        list or watch objects of kind ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_third_party_resource(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ThirdPartyResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_third_party_resource_with_http_info(**kwargs)
        else:
            (data) = self.list_third_party_resource_with_http_info(**kwargs)
            return data

    def list_third_party_resource_with_http_info(self, **kwargs):
        """
        list or watch objects of kind ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_third_party_resource_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: V1beta1ThirdPartyResourceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ThirdPartyResourceList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_daemon_set(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_daemon_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_daemon_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_daemon_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_daemon_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_daemon_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_daemon_set_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_daemon_set_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_daemon_set_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_daemon_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_daemon_set_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_daemon_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_daemon_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_deployment(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_deployment(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_deployment_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_deployment_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_deployment`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_deployment`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_deployment_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_deployment_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_deployment_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_deployment_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_deployment_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_deployment_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_deployment_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_deployment_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_deployment_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_horizontal_pod_autoscaler(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_horizontal_pod_autoscaler(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_horizontal_pod_autoscaler_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_horizontal_pod_autoscaler_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_horizontal_pod_autoscaler_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_horizontal_pod_autoscaler_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_horizontal_pod_autoscaler_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_horizontal_pod_autoscaler_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_horizontal_pod_autoscaler_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_horizontal_pod_autoscaler_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_ingress(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_ingress(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_ingress_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_ingress_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_ingress`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_ingress`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_ingress_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_ingress_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_ingress_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_ingress_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_ingress_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_ingress_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_ingress_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_ingress_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_ingress_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_ingress_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_job(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_job(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_job_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_job_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_job`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_job`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_job_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_job_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_job_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_job_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_job_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_job_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_job_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_job_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_job_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_network_policy(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_network_policy(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_network_policy_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_network_policy_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_network_policy`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_network_policy`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_replica_set(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_replica_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_replica_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_replica_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_replica_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_replica_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_replica_set_status(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_replica_set_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_replica_set_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_replica_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_replica_set_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_replica_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_replica_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_scale_scale(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_scale_scale_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_scale_scale_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_scale_scale_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_scale_scale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_scale_scale`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_scale_scale`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_scale_scale`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_scale_scale_0(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale_0(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_scale_scale_0_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_scale_scale_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_scale_scale_0`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_scale_scale_0`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_scale_scale_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_namespaced_scale_scale_1(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale_1(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.patch_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def patch_namespaced_scale_scale_1_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        partially update scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_namespaced_scale_scale_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_namespaced_scale_scale_1`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `patch_namespaced_scale_scale_1`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_namespaced_scale_scale_1`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def patch_third_party_resource(self, Body, Name, **kwargs):
        """
        partially update the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_third_party_resource(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_third_party_resource_with_http_info(Body, Name, **kwargs)
        else:
            (data) = self.patch_third_party_resource_with_http_info(Body, Name, **kwargs)
            return data

    def patch_third_party_resource_with_http_info(self, Body, Name, **kwargs):
        """
        partially update the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_third_party_resource_with_http_info(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UnversionedPatch Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `patch_third_party_resource`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `patch_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ThirdPartyResource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_daemon_set(self, Namespace, Name, **kwargs):
        """
        read the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_daemon_set(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_daemon_set_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_daemon_set_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_daemon_set_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_daemon_set_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_daemon_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_daemon_set_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_daemon_set_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_daemon_set_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_daemon_set_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_daemon_set_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_daemon_set_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_daemon_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_daemon_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_daemon_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_deployment(self, Namespace, Name, **kwargs):
        """
        read the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_deployment(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_deployment_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_deployment_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_deployment_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_deployment_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_deployment`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_deployment_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_deployment_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_deployment_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_deployment_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_deployment_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_deployment_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_deployment_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_deployment_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_horizontal_pod_autoscaler(self, Namespace, Name, **kwargs):
        """
        read the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_horizontal_pod_autoscaler(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_horizontal_pod_autoscaler_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_horizontal_pod_autoscaler_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_horizontal_pod_autoscaler_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_horizontal_pod_autoscaler_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_horizontal_pod_autoscaler_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_horizontal_pod_autoscaler_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_horizontal_pod_autoscaler_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_horizontal_pod_autoscaler_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_horizontal_pod_autoscaler_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_horizontal_pod_autoscaler_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_ingress(self, Namespace, Name, **kwargs):
        """
        read the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_ingress(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_ingress_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_ingress_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_ingress_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_ingress_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_ingress`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_ingress_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_ingress_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_ingress_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_ingress_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_ingress_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_ingress_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_ingress_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_ingress_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_ingress_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_job(self, Namespace, Name, **kwargs):
        """
        read the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_job(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_job_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_job_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_job_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_job_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_job`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_job_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_job_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_job_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_job_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_job_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_job_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_job_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_job_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_network_policy(self, Namespace, Name, **kwargs):
        """
        read the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_network_policy(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_network_policy_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_network_policy_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_network_policy_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_network_policy_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_network_policy`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_replica_set(self, Namespace, Name, **kwargs):
        """
        read the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_replica_set(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_replica_set_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_replica_set_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_replica_set_with_http_info(self, Namespace, Name, **kwargs):
        """
        read the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_replica_set_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_replica_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_replica_set_status(self, Namespace, Name, **kwargs):
        """
        read status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_replica_set_status(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_replica_set_status_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_replica_set_status_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_replica_set_status_with_http_info(self, Namespace, Name, **kwargs):
        """
        read status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_replica_set_status_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_replica_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_replica_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_replica_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_scale_scale(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_scale_scale_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_scale_scale_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_scale_scale_with_http_info(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_scale_scale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_scale_scale`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_scale_scale`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_scale_scale_0(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale_0(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_scale_scale_0_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_scale_scale_0_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_scale_scale_0_with_http_info(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale_0_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_scale_scale_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_scale_scale_0`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_scale_scale_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_namespaced_scale_scale_1(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale_1(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_namespaced_scale_scale_1_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.read_namespaced_scale_scale_1_with_http_info(Namespace, Name, **kwargs)
            return data

    def read_namespaced_scale_scale_1_with_http_info(self, Namespace, Name, **kwargs):
        """
        read scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_namespaced_scale_scale_1_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_namespaced_scale_scale_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `read_namespaced_scale_scale_1`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_namespaced_scale_scale_1`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def read_third_party_resource(self, Name, **kwargs):
        """
        read the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_third_party_resource(Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.read_third_party_resource_with_http_info(Name, **kwargs)
        else:
            (data) = self.read_third_party_resource_with_http_info(Name, **kwargs)
            return data

    def read_third_party_resource_with_http_info(self, Name, **kwargs):
        """
        read the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.read_third_party_resource_with_http_info(Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param bool Export: Should this value be exported.  Export strips fields that a user can not specify.
        :param bool Exact: Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Name', 'Pretty', 'Export', 'Exact']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `read_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'Export' in params:
            query_params['export'] = params['Export']
        if 'Exact' in params:
            query_params['exact'] = params['Exact']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ThirdPartyResource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_daemon_set(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_daemon_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_daemon_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_daemon_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_daemon_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_daemon_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_daemon_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_daemon_set_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_daemon_set_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_daemon_set_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_daemon_set_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1DaemonSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1DaemonSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_daemon_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_daemon_set_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_daemon_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_daemon_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1DaemonSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_deployment(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_deployment(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_deployment_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_deployment_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_deployment_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_deployment`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_deployment`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_deployment_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_deployment_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_deployment_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_deployment_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_deployment_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_deployment_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Deployment Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_deployment_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_deployment_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_deployment_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Deployment',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_horizontal_pod_autoscaler(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_horizontal_pod_autoscaler(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_horizontal_pod_autoscaler_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_horizontal_pod_autoscaler_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_horizontal_pod_autoscaler_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_horizontal_pod_autoscaler_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_horizontal_pod_autoscaler_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_horizontal_pod_autoscaler_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1HorizontalPodAutoscaler Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1HorizontalPodAutoscaler
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_horizontal_pod_autoscaler_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_horizontal_pod_autoscaler_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_horizontal_pod_autoscaler_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_horizontal_pod_autoscaler_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1HorizontalPodAutoscaler',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_ingress(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_ingress(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_ingress_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_ingress_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_ingress_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_ingress`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_ingress`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_ingress_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_ingress_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_ingress_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_ingress_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_ingress_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_ingress_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Ingress Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Ingress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_ingress_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_ingress_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_ingress_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_ingress_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Ingress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_job(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_job(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_job_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_job_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_job_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_job`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_job`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_job_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_job_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_job_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_job_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_job_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_job_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Job Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_job_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_job_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_job_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/jobs/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Job',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_network_policy(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_network_policy(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1NetworkPolicy Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_network_policy_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_network_policy_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_network_policy_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1NetworkPolicy Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1NetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_network_policy`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_network_policy`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1NetworkPolicy',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_replica_set(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_replica_set(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_replica_set_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_replica_set_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_replica_set_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_replica_set`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_replica_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_replica_set_status(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_replica_set_status(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_replica_set_status_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace status of the specified ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_replica_set_status_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ReplicaSet Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ReplicaSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_replica_set_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_replica_set_status`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_replica_set_status`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_replica_set_status`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ReplicaSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_scale_scale(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_scale_scale_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_scale_scale_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_scale_scale_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_scale_scale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_scale_scale`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_scale_scale`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_scale_scale`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_scale_scale_0(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale_0(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_scale_scale_0_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale_0_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_scale_scale_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_scale_scale_0`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_scale_scale_0`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_scale_scale_0`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_namespaced_scale_scale_1(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale_1(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, **kwargs)
        else:
            (data) = self.replace_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, **kwargs)
            return data

    def replace_namespaced_scale_scale_1_with_http_info(self, Body, Namespace, Name, **kwargs):
        """
        replace scale of the specified Scale
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_namespaced_scale_scale_1_with_http_info(Body, Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1Scale Body:  (required)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Scale (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1Scale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Namespace', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_namespaced_scale_scale_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_namespaced_scale_scale_1`")
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `replace_namespaced_scale_scale_1`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_namespaced_scale_scale_1`")

        resource_path = '/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1Scale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def replace_third_party_resource(self, Body, Name, **kwargs):
        """
        replace the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_third_party_resource(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ThirdPartyResource Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.replace_third_party_resource_with_http_info(Body, Name, **kwargs)
        else:
            (data) = self.replace_third_party_resource_with_http_info(Body, Name, **kwargs)
            return data

    def replace_third_party_resource_with_http_info(self, Body, Name, **kwargs):
        """
        replace the specified ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.replace_third_party_resource_with_http_info(Body, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param V1beta1ThirdPartyResource Body:  (required)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :return: V1beta1ThirdPartyResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Body', 'Name', 'Pretty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Body' is set
        if ('Body' not in params) or (params['Body'] is None):
            raise ValueError("Missing the required parameter `Body` when calling `replace_third_party_resource`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `replace_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/thirdpartyresources/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'Body' in params:
            body_params = params['Body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='V1beta1ThirdPartyResource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_daemon_set(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_daemon_set_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_daemon_set_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_daemon_set_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the DaemonSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_daemon_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_daemon_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_daemon_set`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_daemon_set_list(self, **kwargs):
        """
        watch individual changes to a list of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_daemon_set_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_daemon_set_list_with_http_info(**kwargs)
            return data

    def watch_namespaced_daemon_set_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_daemon_set_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/daemonsets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_daemon_set_list_0(self, Namespace, **kwargs):
        """
        watch individual changes to a list of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set_list_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_daemon_set_list_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_daemon_set_list_0_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_daemon_set_list_0_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of DaemonSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_daemon_set_list_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_daemon_set_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_daemon_set_list_0`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_deployment(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_deployment_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_deployment_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_deployment_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Deployment (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_deployment`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_deployment`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_deployment_list(self, **kwargs):
        """
        watch individual changes to a list of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_deployment_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_deployment_list_with_http_info(**kwargs)
            return data

    def watch_namespaced_deployment_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_deployment_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/deployments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_deployment_list_0(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment_list_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_deployment_list_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_deployment_list_0_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_deployment_list_0_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Deployment
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_deployment_list_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_deployment_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_deployment_list_0`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_horizontal_pod_autoscaler(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_horizontal_pod_autoscaler_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the HorizontalPodAutoscaler (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_horizontal_pod_autoscaler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_horizontal_pod_autoscaler`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_horizontal_pod_autoscaler`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_horizontal_pod_autoscaler_list(self, **kwargs):
        """
        watch individual changes to a list of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_horizontal_pod_autoscaler_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_horizontal_pod_autoscaler_list_with_http_info(**kwargs)
            return data

    def watch_namespaced_horizontal_pod_autoscaler_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_horizontal_pod_autoscaler_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_horizontal_pod_autoscaler_list_0(self, Namespace, **kwargs):
        """
        watch individual changes to a list of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler_list_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_horizontal_pod_autoscaler_list_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_horizontal_pod_autoscaler_list_0_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_horizontal_pod_autoscaler_list_0_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of HorizontalPodAutoscaler
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_horizontal_pod_autoscaler_list_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_horizontal_pod_autoscaler_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_horizontal_pod_autoscaler_list_0`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/horizontalpodautoscalers'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_ingress(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_ingress_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_ingress_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_ingress_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Ingress (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_ingress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_ingress`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_ingress`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_ingress_list(self, **kwargs):
        """
        watch individual changes to a list of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_ingress_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_ingress_list_with_http_info(**kwargs)
            return data

    def watch_namespaced_ingress_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_ingress_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/ingresses'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_ingress_list_0(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress_list_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_ingress_list_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_ingress_list_0_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_ingress_list_0_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Ingress
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_ingress_list_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_ingress_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_ingress_list_0`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_job(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_job_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_job_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_job_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the Job (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_job`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_job`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_job_list(self, **kwargs):
        """
        watch individual changes to a list of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_job_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_job_list_with_http_info(**kwargs)
            return data

    def watch_namespaced_job_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_job_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/jobs'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_job_list_0(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job_list_0(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_job_list_0_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_job_list_0_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_job_list_0_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of Job
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_job_list_0_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_job_list_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_job_list_0`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/jobs'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_network_policy(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_network_policy_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_network_policy_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_network_policy_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the NetworkPolicy (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_network_policy`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_network_policy`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_network_policy_list(self, Namespace, **kwargs):
        """
        watch individual changes to a list of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy_list(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_network_policy_list_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_network_policy_list_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_network_policy_list_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy_list_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_network_policy_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_network_policy_list`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_network_policy_list_0(self, **kwargs):
        """
        watch individual changes to a list of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy_list_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_network_policy_list_0_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_network_policy_list_0_with_http_info(**kwargs)
            return data

    def watch_namespaced_network_policy_list_0_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of NetworkPolicy
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_network_policy_list_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_network_policy_list_0" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/networkpolicies'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_replica_set(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_replica_set_with_http_info(Namespace, Name, **kwargs)
        else:
            (data) = self.watch_namespaced_replica_set_with_http_info(Namespace, Name, **kwargs)
            return data

    def watch_namespaced_replica_set_with_http_info(self, Namespace, Name, **kwargs):
        """
        watch changes to an object of kind ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set_with_http_info(Namespace, Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Name: name of the ReplicaSet (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_replica_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_replica_set`")
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_namespaced_replica_set`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_replica_set_list(self, Namespace, **kwargs):
        """
        watch individual changes to a list of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set_list(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_replica_set_list_with_http_info(Namespace, **kwargs)
        else:
            (data) = self.watch_namespaced_replica_set_list_with_http_info(Namespace, **kwargs)
            return data

    def watch_namespaced_replica_set_list_with_http_info(self, Namespace, **kwargs):
        """
        watch individual changes to a list of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set_list_with_http_info(Namespace, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Namespace: object name and auth scope, such as for teams and projects (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Namespace', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_replica_set_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Namespace' is set
        if ('Namespace' not in params) or (params['Namespace'] is None):
            raise ValueError("Missing the required parameter `Namespace` when calling `watch_namespaced_replica_set_list`")

        resource_path = '/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets'.replace('{format}', 'json')
        path_params = {}
        if 'Namespace' in params:
            path_params['namespace'] = params['Namespace']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_namespaced_replica_set_list_0(self, **kwargs):
        """
        watch individual changes to a list of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set_list_0(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_namespaced_replica_set_list_0_with_http_info(**kwargs)
        else:
            (data) = self.watch_namespaced_replica_set_list_0_with_http_info(**kwargs)
            return data

    def watch_namespaced_replica_set_list_0_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of ReplicaSet
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_namespaced_replica_set_list_0_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_namespaced_replica_set_list_0" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/replicasets'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_third_party_resource(self, Name, **kwargs):
        """
        watch changes to an object of kind ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_third_party_resource(Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_third_party_resource_with_http_info(Name, **kwargs)
        else:
            (data) = self.watch_third_party_resource_with_http_info(Name, **kwargs)
            return data

    def watch_third_party_resource_with_http_info(self, Name, **kwargs):
        """
        watch changes to an object of kind ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_third_party_resource_with_http_info(Name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Name: name of the ThirdPartyResource (required)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Name', 'Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_third_party_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'Name' is set
        if ('Name' not in params) or (params['Name'] is None):
            raise ValueError("Missing the required parameter `Name` when calling `watch_third_party_resource`")

        resource_path = '/apis/extensions/v1beta1/watch/thirdpartyresources/{name}'.replace('{format}', 'json')
        path_params = {}
        if 'Name' in params:
            path_params['name'] = params['Name']

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def watch_third_party_resource_list(self, **kwargs):
        """
        watch individual changes to a list of ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_third_party_resource_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.watch_third_party_resource_list_with_http_info(**kwargs)
        else:
            (data) = self.watch_third_party_resource_list_with_http_info(**kwargs)
            return data

    def watch_third_party_resource_list_with_http_info(self, **kwargs):
        """
        watch individual changes to a list of ThirdPartyResource
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.watch_third_party_resource_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str Pretty: If 'true', then the output is pretty printed.
        :param str LabelSelector: A selector to restrict the list of returned objects by their labels. Defaults to everything.
        :param str FieldSelector: A selector to restrict the list of returned objects by their fields. Defaults to everything.
        :param bool Watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
        :param str ResourceVersion: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
        :param int TimeoutSeconds: Timeout for the list/watch call.
        :return: VersionedEvent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['Pretty', 'LabelSelector', 'FieldSelector', 'Watch', 'ResourceVersion', 'TimeoutSeconds']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method watch_third_party_resource_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/apis/extensions/v1beta1/watch/thirdpartyresources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'Pretty' in params:
            query_params['pretty'] = params['Pretty']
        if 'LabelSelector' in params:
            query_params['labelSelector'] = params['LabelSelector']
        if 'FieldSelector' in params:
            query_params['fieldSelector'] = params['FieldSelector']
        if 'Watch' in params:
            query_params['watch'] = params['Watch']
        if 'ResourceVersion' in params:
            query_params['resourceVersion'] = params['ResourceVersion']
        if 'TimeoutSeconds' in params:
            query_params['timeoutSeconds'] = params['TimeoutSeconds']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf', 'application/vnd.kubernetes.protobuf;stream=watch'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['*/*'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VersionedEvent',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
